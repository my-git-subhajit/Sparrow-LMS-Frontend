pipeline {
    agent any
    environment {
        GITHUB_PAT = credentials('Github_Token')
        GITHUB_URL = 'https://github.com/my-git-subhajit/Sparrow-LMS-Frontend.git'
        GIT_BRANCH = 'main'
        
        // SONAR_HOME = tool "sonar-scanner"
        
        DOCKER_HUB_KEY = credentials('subhajit-docker-hub')
        DOCKER_IMAGE = 'iamgood1989/sparrow_frontend'
        DOCKER_TAG = "${env.BUILD_ID}"
    }
    
    stages {
        stage('GIT CLONE') {
            steps {
                script {
                    try {
                        checkout([$class: 'GitSCM', branches: [[name: env.GIT_BRANCH]], userRemoteConfigs: [[url:  env.GITHUB_URL, credentialsId: 'Github_Token']]])
                    } catch (err) {
                        echo "Error during Git clone: ${err.message}"
                        currentBuild.result = 'FAILURE'
                        error "Stopping pipeline due to Git clone error."
                    }
                }
            }
        }
        // stage("SonarQube Quality Analysis"){
        //     steps{
        //         withSonarQubeEnv("sonar-server"){
        //             sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=sparrowcodinglabsfrontend -Dsonar.projectKey=sparrowcodinglabsfrontend"
        //         }
        //     }
        // }
        // stage('OWASP Dependency Check') {
        //     steps {
        //         script {
        //             try {
        //                 dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'Dependency-Check'
        //                 dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //             } catch (err) {
        //                 echo "Error in OWASP FS SCAN: ${err.message}"
        //                 currentBuild.result = 'UNSTABLE'
        //             }
        //         }
        //     }
        // }
        // stage("Sonar Quality Gate Scan"){
        //     steps{
        //         timeout(time: 2, unit: "MINUTES"){
        //             waitForQualityGate abortPipeline: false
        //         }
        //     }
        // }
        // stage("Trivy File System Scan"){
        //     steps{
        //         sh "trivy fs --format  table -o trivy-frontend-fs-report.html ."
        //     }
        // }
        stage("Docker Build Image") {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', "subhajit-docker-hub") {
                        def customImage = docker.build("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}",".")
                        customImage.push()
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully!"
            // Add success notification logic here
        }
        failure {
            echo "Pipeline failed. Sending notifications..."
            // Add failure notification logic here (e.g., email, Slack)
        }
    }
}